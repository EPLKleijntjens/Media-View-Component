/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  MediaViewSource,
} from './utils/media-view-source';

export namespace Components {
  interface MediaView {
    /**
    * (optional) The kind of "object-fit" to use for the image/video. Can be contian, cover, fill, none or scale-down. Defaults to contain.
    */
    'fit': string;
    /**
    * (optional) Set to true to loop if the source is a video
    */
    'loop': boolean;
    /**
    * Use to set the mediaSource object directly. Use either this or the src property.
    */
    'mediaViewSource': MediaViewSource;
    /**
    * (optional) Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to "normal".
    */
    'panDirection': string;
    /**
    * (optional) Set the number of iterations of the panning animation. Accepts Infinity.
    */
    'panIterations': number;
    /**
    * (optional) Set to true to pause the panning animation.
    */
    'panPaused': boolean;
    /**
    * (optional) Duration in seconds of the panning animation.
    */
    'panTime': number;
    /**
    * (optional) Set to false to start playing if the source is a video.
    */
    'paused': boolean;
    /**
    * (optional) Time in seconds to start playing from (and loop back to) if source is a video.
    */
    'playStart': number;
    /**
    * (optional) Time in seconds to play if source is a video.
    */
    'playTime': number;
    /**
    * The source url of the image/video. Use either this or the mediaSource property.
    */
    'src': string;
    /**
    * (optional) The source type. Can be either "image" or "video". If unspecified, the component will figure it out.
    */
    'srcType': string;
  }
}

declare global {


  interface HTMLMediaViewElement extends Components.MediaView, HTMLStencilElement {}
  var HTMLMediaViewElement: {
    prototype: HTMLMediaViewElement;
    new (): HTMLMediaViewElement;
  };
  interface HTMLElementTagNameMap {
    'media-view': HTMLMediaViewElement;
  }
}

declare namespace LocalJSX {
  interface MediaView extends JSXBase.HTMLAttributes<HTMLMediaViewElement> {
    /**
    * (optional) The kind of "object-fit" to use for the image/video. Can be contian, cover, fill, none or scale-down. Defaults to contain.
    */
    'fit'?: string;
    /**
    * (optional) Set to true to loop if the source is a video
    */
    'loop'?: boolean;
    /**
    * Use to set the mediaSource object directly. Use either this or the src property.
    */
    'mediaViewSource'?: MediaViewSource;
    /**
    * Fires when the image/video is loaded.
    */
    'onMediaLoaded'?: (event: CustomEvent<any>) => void;
    /**
    * Fires when the image/video could not be loaded.
    */
    'onMediaSourceInvalid'?: (event: CustomEvent<any>) => void;
    /**
    * Fires when the video stopped playing.
    */
    'onPlayEnded'?: (event: CustomEvent<any>) => void;
    /**
    * Fires when the video starts playing.
    */
    'onPlayStarted'?: (event: CustomEvent<any>) => void;
    /**
    * (optional) Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to "normal".
    */
    'panDirection'?: string;
    /**
    * (optional) Set the number of iterations of the panning animation. Accepts Infinity.
    */
    'panIterations'?: number;
    /**
    * (optional) Set to true to pause the panning animation.
    */
    'panPaused'?: boolean;
    /**
    * (optional) Duration in seconds of the panning animation.
    */
    'panTime'?: number;
    /**
    * (optional) Set to false to start playing if the source is a video.
    */
    'paused'?: boolean;
    /**
    * (optional) Time in seconds to start playing from (and loop back to) if source is a video.
    */
    'playStart'?: number;
    /**
    * (optional) Time in seconds to play if source is a video.
    */
    'playTime'?: number;
    /**
    * The source url of the image/video. Use either this or the mediaSource property.
    */
    'src'?: string;
    /**
    * (optional) The source type. Can be either "image" or "video". If unspecified, the component will figure it out.
    */
    'srcType'?: string;
  }

  interface IntrinsicElements {
    'media-view': MediaView;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


